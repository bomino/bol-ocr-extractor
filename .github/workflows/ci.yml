name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  
jobs:
  # Code quality and testing
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng default-jre
        tesseract --version
        java -version
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/test_requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test_requirements.txt
        
    - name: Lint with flake8
      run: |
        # Install flake8 if not in test_requirements.txt
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Type checking with mypy
      run: |
        pip install mypy types-requests
        mypy app.py --ignore-missing-imports --no-strict-optional
        
    - name: Security check with bandit
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json
        bandit -r . -f txt
      continue-on-error: true
      
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html
        
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          bandit-report.json

  # Security scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Dependency scanning with Safety
      run: |
        pip install safety
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true
      
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'bol-ocr-extractor'
        path: '.'
        format: 'ALL'
        
    - name: Upload OWASP results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: owasp-dependency-check-reports
        path: reports/

  # Build and push Docker image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-image-results.sarif'
        
    - name: Upload Trivy image scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  # Container security scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Snyk to check Docker image for vulnerabilities
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
        args: --severity-threshold=medium
      continue-on-error: true
      
    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, container-security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
        
    - name: Deploy to staging
      run: |
        # Update image tag in deployment
        sed -i 's|image: bol-ocr-extractor:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|' k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/bol-ocr-app -n bol-ocr --timeout=300s
        
    - name: Run smoke tests
      run: |
        # Wait for service to be available
        sleep 60
        
        # Get the external IP/URL
        STAGING_URL=$(kubectl get ingress bol-ocr-ingress -n bol-ocr -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Run basic health check
        curl -f https://${STAGING_URL}/health || exit 1
        
        echo "Staging deployment successful: https://${STAGING_URL}"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, container-security]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
        
    - name: Blue-Green Deployment
      run: |
        # Get current deployment
        CURRENT_DEPLOYMENT=$(kubectl get deployment bol-ocr-app -n bol-ocr -o jsonpath='{.metadata.labels.version}' || echo "blue")
        
        if [ "$CURRENT_DEPLOYMENT" = "blue" ]; then
          NEW_DEPLOYMENT="green"
        else
          NEW_DEPLOYMENT="blue"
        fi
        
        echo "Current deployment: $CURRENT_DEPLOYMENT"
        echo "New deployment: $NEW_DEPLOYMENT"
        
        # Create new deployment manifest
        cp k8s/deployment.yaml k8s/deployment-${NEW_DEPLOYMENT}.yaml
        
        # Update image and labels
        sed -i "s|image: bol-ocr-extractor:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}|" k8s/deployment-${NEW_DEPLOYMENT}.yaml
        sed -i "s|name: bol-ocr-app|name: bol-ocr-app-${NEW_DEPLOYMENT}|" k8s/deployment-${NEW_DEPLOYMENT}.yaml
        sed -i "s|app: bol-ocr-extractor|app: bol-ocr-extractor\n    version: ${NEW_DEPLOYMENT}|" k8s/deployment-${NEW_DEPLOYMENT}.yaml
        
        # Apply new deployment
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/deployment-${NEW_DEPLOYMENT}.yaml
        
        # Wait for new deployment to be ready
        kubectl rollout status deployment/bol-ocr-app-${NEW_DEPLOYMENT} -n bol-ocr --timeout=600s
        
        # Update service to point to new deployment
        kubectl patch service bol-ocr-app-service -n bol-ocr -p '{"spec":{"selector":{"version":"'${NEW_DEPLOYMENT}'"}}}'
        
        # Wait and verify
        sleep 30
        
        # Health check
        PROD_URL=$(kubectl get ingress bol-ocr-ingress -n bol-ocr -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        curl -f https://${PROD_URL}/health || exit 1
        
        # Clean up old deployment
        kubectl delete deployment bol-ocr-app-${CURRENT_DEPLOYMENT} -n bol-ocr --ignore-not-found=true
        
        echo "Production deployment successful: https://${PROD_URL}"
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: "✅ BOL OCR Extractor ${{ github.ref_name }} deployed to production successfully!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: "❌ BOL OCR Extractor ${{ github.ref_name }} deployment to production failed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run performance tests
      run: |
        # Install k6
        curl https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1
        
        # Run load test (create k6 script)
        cat > performance-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';
        
        export let options = {
          vus: 10,
          duration: '2m',
        };
        
        export default function() {
          const response = http.get('https://staging.bol-ocr.example.com/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
          sleep(1);
        }
        EOF
        
        ./k6 run performance-test.js